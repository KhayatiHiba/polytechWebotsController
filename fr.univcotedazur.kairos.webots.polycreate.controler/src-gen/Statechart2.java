/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart2 implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_ROBOT_IS_MOVING,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_TURNING,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_GAP_DOWN,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND,
		MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public Statechart2() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		thereIsAnObstacle = false;
		thereIsNoObstacle = false;
		thereIsAFrontObstacle = false;
		thereIsAVirtualWall = false;
		thereIsAnObjectFront = false;
		thereIsAnObjectBack = false;
		thereIsAGapDown = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		
		switch (stateVector[0]) {
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_TURNING:
			transitioned = main_region_robot_is_moving_main_turning_react(transitioned);
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_GAP_DOWN:
			transitioned = main_region_robot_is_moving_main_gap_down_react(transitioned);
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK:
			transitioned = main_region_robot_is_moving_main_move_r1_moveBack_react(transitioned);
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT:
			transitioned = main_region_robot_is_moving_main_move_r1_moveFront_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT:
				transitioned = main_region_robot_is_moving_main_move_objectChecking_checkobject_react(transitioned);
				break;
			case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED:
				transitioned = main_region_robot_is_moving_main_move_objectChecking_robotIsStopped_react(transitioned);
				break;
			case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND:
				transitioned = main_region_robot_is_moving_main_move_objectChecking_turnRound_react(transitioned);
				break;
			case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP:
				transitioned = main_region_robot_is_moving_main_move_objectChecking_grip_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while (((((((((((((thereIsAnObstacle || thereIsNoObstacle) || thereIsAFrontObstacle) || thereIsAVirtualWall) || thereIsAnObjectFront) || thereIsAnObjectBack) || thereIsAGapDown) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_ROBOT_IS_MOVING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ROBOT_IS_MOVING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP.ordinal();
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_TURNING:
			return stateVector[0] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_TURNING;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_GAP_DOWN:
			return stateVector[0] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_GAP_DOWN;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP.ordinal();
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK:
			return stateVector[0] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT:
			return stateVector[0] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT:
			return stateVector[1] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED:
			return stateVector[1] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND:
			return stateVector[1] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP:
			return stateVector[1] == State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean thereIsAnObstacle;
	
	
	public void raiseThereIsAnObstacle() {
		inEventQueue.add(() -> {
			thereIsAnObstacle = true;
		});
		runCycle();
	}
	
	private boolean thereIsNoObstacle;
	
	
	public void raiseThereIsNoObstacle() {
		inEventQueue.add(() -> {
			thereIsNoObstacle = true;
		});
		runCycle();
	}
	
	private boolean thereIsAFrontObstacle;
	
	
	public void raiseThereIsAFrontObstacle() {
		inEventQueue.add(() -> {
			thereIsAFrontObstacle = true;
		});
		runCycle();
	}
	
	private boolean thereIsAVirtualWall;
	
	
	public void raiseThereIsAVirtualWall() {
		inEventQueue.add(() -> {
			thereIsAVirtualWall = true;
		});
		runCycle();
	}
	
	private boolean thereIsAnObjectFront;
	
	
	public void raiseThereIsAnObjectFront() {
		inEventQueue.add(() -> {
			thereIsAnObjectFront = true;
		});
		runCycle();
	}
	
	private boolean thereIsAnObjectBack;
	
	
	public void raiseThereIsAnObjectBack() {
		inEventQueue.add(() -> {
			thereIsAnObjectBack = true;
		});
		runCycle();
	}
	
	private boolean thereIsAGapDown;
	
	
	public void raiseThereIsAGapDown() {
		inEventQueue.add(() -> {
			thereIsAGapDown = true;
		});
		runCycle();
	}
	
	private boolean turn;
	
	
	protected void raiseTurn() {
		turn = true;
		turnObservable.next(null);
	}
	
	private Observable<Void> turnObservable = new Observable<Void>();
	
	public Observable<Void> getTurn() {
		return turnObservable;
	}
	
	private boolean moveFront;
	
	
	protected void raiseMoveFront() {
		moveFront = true;
		moveFrontObservable.next(null);
	}
	
	private Observable<Void> moveFrontObservable = new Observable<Void>();
	
	public Observable<Void> getMoveFront() {
		return moveFrontObservable;
	}
	
	private boolean check;
	
	
	protected void raiseCheck() {
		check = true;
		checkObservable.next(null);
	}
	
	private Observable<Void> checkObservable = new Observable<Void>();
	
	public Observable<Void> getCheck() {
		return checkObservable;
	}
	
	private boolean moveBack;
	
	
	protected void raiseMoveBack() {
		moveBack = true;
		moveBackObservable.next(null);
	}
	
	private Observable<Void> moveBackObservable = new Observable<Void>();
	
	public Observable<Void> getMoveBack() {
		return moveBackObservable;
	}
	
	private boolean stop;
	
	
	protected void raiseStop() {
		stop = true;
		stopObservable.next(null);
	}
	
	private Observable<Void> stopObservable = new Observable<Void>();
	
	public Observable<Void> getStop() {
		return stopObservable;
	}
	
	private boolean turnRound;
	
	
	protected void raiseTurnRound() {
		turnRound = true;
		turnRoundObservable.next(null);
	}
	
	private Observable<Void> turnRoundObservable = new Observable<Void>();
	
	public Observable<Void> getTurnRound() {
		return turnRoundObservable;
	}
	
	private boolean checkGripper;
	
	
	protected void raiseCheckGripper() {
		checkGripper = true;
		checkGripperObservable.next(null);
	}
	
	private Observable<Void> checkGripperObservable = new Observable<Void>();
	
	public Observable<Void> getCheckGripper() {
		return checkGripperObservable;
	}
	
	private boolean grip;
	
	
	protected void raiseGrip() {
		grip = true;
		gripObservable.next(null);
	}
	
	private Observable<Void> gripObservable = new Observable<Void>();
	
	public Observable<Void> getGrip() {
		return gripObservable;
	}
	
	/* Entry action for state 'turning'. */
	private void entryAction_main_region_robot_is_moving_main_turning() {
		timerService.setTimer(this, 0, 300, true);
		
		raiseTurn();
	}
	
	/* Entry action for state 'gap down'. */
	private void entryAction_main_region_robot_is_moving_main_gap_down() {
		timerService.setTimer(this, 1, 1500, false);
		
		raiseMoveBack();
	}
	
	/* Entry action for state 'moveBack'. */
	private void entryAction_main_region_robot_is_moving_main_move_r1_moveBack() {
		timerService.setTimer(this, 2, 1000, false);
		
		raiseMoveBack();
	}
	
	/* Entry action for state 'moveFront'. */
	private void entryAction_main_region_robot_is_moving_main_move_r1_moveFront() {
		timerService.setTimer(this, 3, 300, true);
		
		raiseMoveFront();
	}
	
	/* Entry action for state 'checkobject'. */
	private void entryAction_main_region_robot_is_moving_main_move_objectChecking_checkobject() {
		timerService.setTimer(this, 4, 500, true);
	}
	
	/* Entry action for state 'robotIsStopped'. */
	private void entryAction_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped() {
		timerService.setTimer(this, 5, 500, false);
	}
	
	/* Entry action for state 'turnRound'. */
	private void entryAction_main_region_robot_is_moving_main_move_objectChecking_turnRound() {
		raiseTurnRound();
	}
	
	/* Exit action for state 'turning'. */
	private void exitAction_main_region_robot_is_moving_main_turning() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'gap down'. */
	private void exitAction_main_region_robot_is_moving_main_gap_down() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'moveBack'. */
	private void exitAction_main_region_robot_is_moving_main_move_r1_moveBack() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'moveFront'. */
	private void exitAction_main_region_robot_is_moving_main_move_r1_moveFront() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'checkobject'. */
	private void exitAction_main_region_robot_is_moving_main_move_objectChecking_checkobject() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'robotIsStopped'. */
	private void exitAction_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped() {
		timerService.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state robot is moving */
	private void enterSequence_main_region_robot_is_moving_default() {
		enterSequence_main_region_robot_is_moving_main_default();
	}
	
	/* 'default' enter sequence for state turning */
	private void enterSequence_main_region_robot_is_moving_main_turning_default() {
		entryAction_main_region_robot_is_moving_main_turning();
		stateVector[0] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_TURNING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state gap down */
	private void enterSequence_main_region_robot_is_moving_main_gap_down_default() {
		entryAction_main_region_robot_is_moving_main_gap_down();
		stateVector[0] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_GAP_DOWN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state move */
	private void enterSequence_main_region_robot_is_moving_main_move_default() {
		enterSequence_main_region_robot_is_moving_main_move_r1_default();
		enterSequence_main_region_robot_is_moving_main_move_objectChecking_default();
	}
	
	/* 'default' enter sequence for state moveBack */
	private void enterSequence_main_region_robot_is_moving_main_move_r1_moveBack_default() {
		entryAction_main_region_robot_is_moving_main_move_r1_moveBack();
		stateVector[0] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state moveFront */
	private void enterSequence_main_region_robot_is_moving_main_move_r1_moveFront_default() {
		entryAction_main_region_robot_is_moving_main_move_r1_moveFront();
		stateVector[0] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state checkobject */
	private void enterSequence_main_region_robot_is_moving_main_move_objectChecking_checkobject_default() {
		entryAction_main_region_robot_is_moving_main_move_objectChecking_checkobject();
		stateVector[1] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state robotIsStopped */
	private void enterSequence_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped_default() {
		entryAction_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped();
		stateVector[1] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state turnRound */
	private void enterSequence_main_region_robot_is_moving_main_move_objectChecking_turnRound_default() {
		entryAction_main_region_robot_is_moving_main_move_objectChecking_turnRound();
		stateVector[1] = State.MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_region_robot_is_moving_main_default() {
		react_main_region_robot_is_moving_main__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_robot_is_moving_main_move_r1_default() {
		react_main_region_robot_is_moving_main_move_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region objectChecking */
	private void enterSequence_main_region_robot_is_moving_main_move_objectChecking_default() {
		react_main_region_robot_is_moving_main_move_objectChecking__entry_Default();
	}
	
	/* Default exit sequence for state turning */
	private void exitSequence_main_region_robot_is_moving_main_turning() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_robot_is_moving_main_turning();
	}
	
	/* Default exit sequence for state gap down */
	private void exitSequence_main_region_robot_is_moving_main_gap_down() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_robot_is_moving_main_gap_down();
	}
	
	/* Default exit sequence for state move */
	private void exitSequence_main_region_robot_is_moving_main_move() {
		exitSequence_main_region_robot_is_moving_main_move_r1();
		exitSequence_main_region_robot_is_moving_main_move_objectChecking();
	}
	
	/* Default exit sequence for state moveBack */
	private void exitSequence_main_region_robot_is_moving_main_move_r1_moveBack() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_robot_is_moving_main_move_r1_moveBack();
	}
	
	/* Default exit sequence for state moveFront */
	private void exitSequence_main_region_robot_is_moving_main_move_r1_moveFront() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
		
		exitAction_main_region_robot_is_moving_main_move_r1_moveFront();
	}
	
	/* Default exit sequence for state checkobject */
	private void exitSequence_main_region_robot_is_moving_main_move_objectChecking_checkobject() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_robot_is_moving_main_move_objectChecking_checkobject();
	}
	
	/* Default exit sequence for state robotIsStopped */
	private void exitSequence_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		
		exitAction_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped();
	}
	
	/* Default exit sequence for state turnRound */
	private void exitSequence_main_region_robot_is_moving_main_move_objectChecking_turnRound() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state grip */
	private void exitSequence_main_region_robot_is_moving_main_move_objectChecking_grip() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_TURNING:
			exitSequence_main_region_robot_is_moving_main_turning();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_GAP_DOWN:
			exitSequence_main_region_robot_is_moving_main_gap_down();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK:
			exitSequence_main_region_robot_is_moving_main_move_r1_moveBack();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT:
			exitSequence_main_region_robot_is_moving_main_move_r1_moveFront();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_checkobject();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_turnRound();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_grip();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_robot_is_moving_main_move_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEBACK:
			exitSequence_main_region_robot_is_moving_main_move_r1_moveBack();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_R1_MOVEFRONT:
			exitSequence_main_region_robot_is_moving_main_move_r1_moveFront();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region objectChecking */
	private void exitSequence_main_region_robot_is_moving_main_move_objectChecking() {
		switch (stateVector[1]) {
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_CHECKOBJECT:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_checkobject();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_ROBOTISSTOPPED:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_TURNROUND:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_turnRound();
			break;
		case MAIN_REGION_ROBOT_IS_MOVING_MAIN_MOVE_OBJECTCHECKING_GRIP:
			exitSequence_main_region_robot_is_moving_main_move_objectChecking_grip();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_robot_is_moving_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_robot_is_moving_main__entry_Default() {
		enterSequence_main_region_robot_is_moving_main_move_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_robot_is_moving_main_move_r1__entry_Default() {
		enterSequence_main_region_robot_is_moving_main_move_r1_moveFront_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_robot_is_moving_main_move_objectChecking__entry_Default() {
		enterSequence_main_region_robot_is_moving_main_move_objectChecking_checkobject_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_robot_is_moving_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_turning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if ((thereIsAnObstacle || thereIsAVirtualWall)) {
				exitSequence_main_region_robot_is_moving_main_turning();
				enterSequence_main_region_robot_is_moving_main_move_r1_moveBack_default();
				enterSequence_main_region_robot_is_moving_main_move_objectChecking_default();
				main_region_robot_is_moving_react(0);
				
				transitioned_after = 0;
			} else {
				if (thereIsNoObstacle) {
					exitSequence_main_region_robot_is_moving_main_turning();
					enterSequence_main_region_robot_is_moving_main_move_default();
					main_region_robot_is_moving_react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[0]) {
				raiseCheck();
			}
			transitioned_after = main_region_robot_is_moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_gap_down_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[1]) {
				exitSequence_main_region_robot_is_moving_main_gap_down();
				enterSequence_main_region_robot_is_moving_main_turning_default();
				main_region_robot_is_moving_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_robot_is_moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAnObstacle) {
				exitSequence_main_region_robot_is_moving_main_move();
				enterSequence_main_region_robot_is_moving_main_turning_default();
				main_region_robot_is_moving_react(0);
				
				transitioned_after = 1;
			} else {
				if (thereIsAGapDown) {
					exitSequence_main_region_robot_is_moving_main_move();
					raiseMoveBack();
					
					enterSequence_main_region_robot_is_moving_main_gap_down_default();
					main_region_robot_is_moving_react(0);
					
					transitioned_after = 1;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_robot_is_moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_r1_moveBack_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_main_region_robot_is_moving_main_move();
				enterSequence_main_region_robot_is_moving_main_turning_default();
				main_region_robot_is_moving_react(0);
				
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_r1_moveFront_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAFrontObstacle) {
				exitSequence_main_region_robot_is_moving_main_move_r1_moveFront();
				enterSequence_main_region_robot_is_moving_main_move_r1_moveBack_default();
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[3]) {
				raiseCheck();
			}
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_objectChecking_checkobject_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (thereIsAnObjectFront) {
				exitSequence_main_region_robot_is_moving_main_move_objectChecking_checkobject();
				raiseStop();
				
				enterSequence_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped_default();
				main_region_robot_is_moving_main_move_react(0);
				
				transitioned_after = 1;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[4]) {
				raiseCheck();
			}
			transitioned_after = main_region_robot_is_moving_main_move_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_objectChecking_robotIsStopped_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
			if (timeEvents[5]) {
				exitSequence_main_region_robot_is_moving_main_move_objectChecking_robotIsStopped();
				enterSequence_main_region_robot_is_moving_main_move_objectChecking_turnRound_default();
				main_region_robot_is_moving_main_move_react(0);
				
				transitioned_after = 1;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_robot_is_moving_main_move_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_objectChecking_turnRound_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_robot_is_moving_main_move_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_robot_is_moving_main_move_objectChecking_grip_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_robot_is_moving_main_move_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
