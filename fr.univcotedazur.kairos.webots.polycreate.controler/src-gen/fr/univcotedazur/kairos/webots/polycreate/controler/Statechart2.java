/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.kairos.webots.polycreate.controler;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Statechart2 implements IStatemachine, ITimed {
	public enum State {
		MOVE_ROBOT_IS_RUNNING,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_GAP_DOWN,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIP,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIPPOSITION,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_BLOCAGE,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP,
		MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK,
		PASSIVE_WAIT_WAIT,
		CHECK_CHECK,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[4];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(Statechart2.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(Statechart2.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(Statechart2.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(Statechart2.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public Statechart2() {
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_move_default();
		enterSequence_passive_wait_default();
		enterSequence_check_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_move();
		exitSequence_passive_wait();
		exitSequence_check();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$||stateVector[3] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		thereIsAnObstacle = false;
		thereIsNoObstacle = false;
		thereIsAFrontObstacle = false;
		thereIsAVirtualWall = false;
		thereIsNoObject = false;
		thereIsAnObjectFront = false;
		thereIsNoVirtualWall = false;
		thereIsAGapDown = false;
		thereIsNoObstacleFront = false;
		thereIsnoGap = false;
		thereIsAnObject = false;
		theGripIsClose = false;
		theGripIsNotClose = false;
		theObjectIsGrip = false;
		objectGrip = false;
		readyToGrip = false;
		gripObject = false;
		robotIsBlocked = false;
		isFacingTheObject = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		
		switch (stateVector[0]) {
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_GAP_DOWN:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_gap_down_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIP:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIPPOSITION:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_BLOCAGE:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_blocage_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop_react(transitioned);
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK:
			transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION:
				transitioned = move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_savePosition_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<2) {
			switch (stateVector[2]) {
			case PASSIVE_WAIT_WAIT:
				transitioned = passive_wait_wait_react(transitioned);
				break;
			default:
				break;
			}
		}
		if (getStateConfVectorPosition()<3) {
			switch (stateVector[3]) {
			case CHECK_CHECK:
				transitioned = check_check_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while (((((((((((((((((((((thereIsAnObstacle || thereIsNoObstacle) || thereIsAFrontObstacle) || thereIsAVirtualWall) || thereIsNoObject) || thereIsAnObjectFront) || thereIsNoVirtualWall) || thereIsAGapDown) || thereIsNoObstacleFront) || thereIsnoGap) || thereIsAnObject) || theGripIsClose) || theGripIsNotClose) || theObjectIsGrip) || objectGrip) || readyToGrip) || gripObject) || robotIsBlocked) || isFacingTheObject) || timeEvents[0]) || timeEvents[1]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MOVE_ROBOT_IS_RUNNING:
			return stateVector[0].ordinal() >= State.
					MOVE_ROBOT_IS_RUNNING.ordinal()&& stateVector[0].ordinal() <= State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK.ordinal();
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE:
			return stateVector[0].ordinal() >= State.
					MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE.ordinal()&& stateVector[0].ordinal() <= State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT.ordinal();
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES:
			return stateVector[0].ordinal() >= State.
					MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES.ordinal()&& stateVector[0].ordinal() <= State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT.ordinal();
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_GAP_DOWN:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_GAP_DOWN;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT:
			return stateVector[0].ordinal() >= State.
					MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT.ordinal()&& stateVector[0].ordinal() <= State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION.ordinal();
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIP:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIP;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIPPOSITION:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIPPOSITION;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION:
			return stateVector[1] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_BLOCAGE:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_BLOCAGE;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL:
			return stateVector[0].ordinal() >= State.
					MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL.ordinal()&& stateVector[0].ordinal() <= State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK.ordinal();
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK:
			return stateVector[0] == State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK;
		case PASSIVE_WAIT_WAIT:
			return stateVector[2] == State.PASSIVE_WAIT_WAIT;
		case CHECK_CHECK:
			return stateVector[3] == State.CHECK_CHECK;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean thereIsAnObstacle;
	
	
	public void raiseThereIsAnObstacle() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsAnObstacle = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsNoObstacle;
	
	
	public void raiseThereIsNoObstacle() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsNoObstacle = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsAFrontObstacle;
	
	
	public void raiseThereIsAFrontObstacle() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsAFrontObstacle = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsAVirtualWall;
	
	
	public void raiseThereIsAVirtualWall() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsAVirtualWall = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsNoObject;
	
	
	public void raiseThereIsNoObject() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsNoObject = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsAnObjectFront;
	
	
	public void raiseThereIsAnObjectFront() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsAnObjectFront = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsNoVirtualWall;
	
	
	public void raiseThereIsNoVirtualWall() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsNoVirtualWall = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsAGapDown;
	
	
	public void raiseThereIsAGapDown() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsAGapDown = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsNoObstacleFront;
	
	
	public void raiseThereIsNoObstacleFront() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsNoObstacleFront = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsnoGap;
	
	
	public void raiseThereIsnoGap() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsnoGap = true;
			});
			runCycle();
		}
	}
	
	private boolean thereIsAnObject;
	
	
	public void raiseThereIsAnObject() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				thereIsAnObject = true;
			});
			runCycle();
		}
	}
	
	private boolean theGripIsClose;
	
	
	public void raiseTheGripIsClose() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				theGripIsClose = true;
			});
			runCycle();
		}
	}
	
	private boolean theGripIsNotClose;
	
	
	public void raiseTheGripIsNotClose() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				theGripIsNotClose = true;
			});
			runCycle();
		}
	}
	
	private boolean theObjectIsGrip;
	
	
	public void raiseTheObjectIsGrip() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				theObjectIsGrip = true;
			});
			runCycle();
		}
	}
	
	private boolean objectGrip;
	
	
	public void raiseObjectGrip() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				objectGrip = true;
			});
			runCycle();
		}
	}
	
	private boolean readyToGrip;
	
	
	public void raiseReadyToGrip() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				readyToGrip = true;
			});
			runCycle();
		}
	}
	
	private boolean gripObject;
	
	
	public void raiseGripObject() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				gripObject = true;
			});
			runCycle();
		}
	}
	
	private boolean robotIsBlocked;
	
	
	public void raiseRobotIsBlocked() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				robotIsBlocked = true;
			});
			runCycle();
		}
	}
	
	private boolean isFacingTheObject;
	
	
	public void raiseIsFacingTheObject() {
		synchronized(Statechart2.this) {
			inEventQueue.add(() -> {
				isFacingTheObject = true;
			});
			runCycle();
		}
	}
	
	private boolean turn;
	
	
	protected void raiseTurn() {
		synchronized(Statechart2.this) {
			turn = true;
			turnObservable.next(null);
		}
	}
	
	private Observable<Void> turnObservable = new Observable<Void>();
	
	public Observable<Void> getTurn() {
		return turnObservable;
	}
	
	private boolean situateSelf;
	
	
	protected void raiseSituateSelf() {
		synchronized(Statechart2.this) {
			situateSelf = true;
			situateSelfObservable.next(null);
		}
	}
	
	private Observable<Void> situateSelfObservable = new Observable<Void>();
	
	public Observable<Void> getSituateSelf() {
		return situateSelfObservable;
	}
	
	private boolean moveFront;
	
	
	protected void raiseMoveFront() {
		synchronized(Statechart2.this) {
			moveFront = true;
			moveFrontObservable.next(null);
		}
	}
	
	private Observable<Void> moveFrontObservable = new Observable<Void>();
	
	public Observable<Void> getMoveFront() {
		return moveFrontObservable;
	}
	
	private boolean check;
	
	
	protected void raiseCheck() {
		synchronized(Statechart2.this) {
			check = true;
			checkObservable.next(null);
		}
	}
	
	private Observable<Void> checkObservable = new Observable<Void>();
	
	public Observable<Void> getCheck() {
		return checkObservable;
	}
	
	private boolean moveBack;
	
	
	protected void raiseMoveBack() {
		synchronized(Statechart2.this) {
			moveBack = true;
			moveBackObservable.next(null);
		}
	}
	
	private Observable<Void> moveBackObservable = new Observable<Void>();
	
	public Observable<Void> getMoveBack() {
		return moveBackObservable;
	}
	
	private boolean fullTurn;
	
	
	protected void raiseFullTurn() {
		synchronized(Statechart2.this) {
			fullTurn = true;
			fullTurnObservable.next(null);
		}
	}
	
	private Observable<Void> fullTurnObservable = new Observable<Void>();
	
	public Observable<Void> getFullTurn() {
		return fullTurnObservable;
	}
	
	private boolean stop;
	
	
	protected void raiseStop() {
		synchronized(Statechart2.this) {
			stop = true;
			stopObservable.next(null);
		}
	}
	
	private Observable<Void> stopObservable = new Observable<Void>();
	
	public Observable<Void> getStop() {
		return stopObservable;
	}
	
	private boolean turnRound;
	
	
	protected void raiseTurnRound() {
		synchronized(Statechart2.this) {
			turnRound = true;
			turnRoundObservable.next(null);
		}
	}
	
	private Observable<Void> turnRoundObservable = new Observable<Void>();
	
	public Observable<Void> getTurnRound() {
		return turnRoundObservable;
	}
	
	private boolean grip;
	
	
	protected void raiseGrip() {
		synchronized(Statechart2.this) {
			grip = true;
			gripObservable.next(null);
		}
	}
	
	private Observable<Void> gripObservable = new Observable<Void>();
	
	public Observable<Void> getGrip() {
		return gripObservable;
	}
	
	private boolean doPW;
	
	
	protected void raiseDoPW() {
		synchronized(Statechart2.this) {
			doPW = true;
			doPWObservable.next(null);
		}
	}
	
	private Observable<Void> doPWObservable = new Observable<Void>();
	
	public Observable<Void> getDoPW() {
		return doPWObservable;
	}
	
	private boolean saveRobotPosition;
	
	
	protected void raiseSaveRobotPosition() {
		synchronized(Statechart2.this) {
			saveRobotPosition = true;
			saveRobotPositionObservable.next(null);
		}
	}
	
	private Observable<Void> saveRobotPositionObservable = new Observable<Void>();
	
	public Observable<Void> getSaveRobotPosition() {
		return saveRobotPositionObservable;
	}
	
	private boolean checkGripping;
	
	
	protected void raiseCheckGripping() {
		synchronized(Statechart2.this) {
			checkGripping = true;
			checkGrippingObservable.next(null);
		}
	}
	
	private Observable<Void> checkGrippingObservable = new Observable<Void>();
	
	public Observable<Void> getCheckGripping() {
		return checkGrippingObservable;
	}
	
	private boolean deblock;
	
	
	protected void raiseDeblock() {
		synchronized(Statechart2.this) {
			deblock = true;
			deblockObservable.next(null);
		}
	}
	
	private Observable<Void> deblockObservable = new Observable<Void>();
	
	public Observable<Void> getDeblock() {
		return deblockObservable;
	}
	
	private boolean gripPosition;
	
	
	protected void raiseGripPosition() {
		synchronized(Statechart2.this) {
			gripPosition = true;
			gripPositionObservable.next(null);
		}
	}
	
	private Observable<Void> gripPositionObservable = new Observable<Void>();
	
	public Observable<Void> getGripPosition() {
		return gripPositionObservable;
	}
	
	/* Entry action for state 'turning'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning() {
		raiseTurn();
	}
	
	/* Entry action for state 'moveBack'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack() {
		raiseMoveBack();
	}
	
	/* Entry action for state 'moveFront'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront() {
		raiseMoveFront();
	}
	
	/* Entry action for state 'gap down'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_gap_down() {
		raiseMoveBack();
	}
	
	/* Entry action for state 'grip'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip() {
		raiseGrip();
	}
	
	/* Entry action for state 'gripPosition'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition() {
		raiseGripPosition();
	}
	
	/* Entry action for state 'blocage'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_blocage() {
		raiseDeblock();
	}
	
	/* Entry action for state 'virtual stop'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop() {
		raiseFullTurn();
	}
	
	/* Entry action for state 'virtual block'. */
	private void entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block() {
		raiseTurnRound();
	}
	
	/* Entry action for state 'wait'. */
	private void entryAction_passive_wait_wait() {
		timerService.setTimer(this, 0, 300, true);
	}
	
	/* Entry action for state 'check'. */
	private void entryAction_check_check() {
		timerService.setTimer(this, 1, 30, true);
	}
	
	/* Exit action for state 'wait'. */
	private void exitAction_passive_wait_wait() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'check'. */
	private void exitAction_check_check() {
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state robot is running */
	private void enterSequence_move_robot_is_running_default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_default();
	}
	
	/* 'default' enter sequence for state robot and obstacle */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_default();
	}
	
	/* 'default' enter sequence for state turning */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state moves */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_default();
	}
	
	/* 'default' enter sequence for state moveBack */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state moveFront */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state gap down */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_gap_down();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_GAP_DOWN;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state grip */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state gripPosition */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIPPOSITION;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state savePosition */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_savePosition_default() {
		stateVector[1] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state blocage */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_blocage_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_blocage();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_BLOCAGE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state robot and virtualWall */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_default();
	}
	
	/* 'default' enter sequence for state virtual stop */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state virtual block */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block_default() {
		entryAction_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block();
		stateVector[0] = State.MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state wait */
	private void enterSequence_passive_wait_wait_default() {
		entryAction_passive_wait_wait();
		stateVector[2] = State.PASSIVE_WAIT_WAIT;
		stateConfVectorPosition = 2;
	}
	
	/* 'default' enter sequence for state check */
	private void enterSequence_check_check_default() {
		entryAction_check_check();
		stateVector[3] = State.CHECK_CHECK;
		stateConfVectorPosition = 3;
	}
	
	/* 'default' enter sequence for region move */
	private void enterSequence_move_default() {
		react_move__entry_Default();
	}
	
	/* 'default' enter sequence for region robot is in cleaning mode */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_default() {
		react_move_robot_is_running_robot_is_in_cleaning_mode__entry_Default();
	}
	
	/* 'default' enter sequence for region dodging obstacles */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_default() {
		react_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles__entry_Default();
	}
	
	/* 'default' enter sequence for region simple robot movement */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_default() {
		react_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement__entry_Default();
	}
	
	/* 'default' enter sequence for region save position */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_default() {
		react_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position__entry_Default();
	}
	
	/* 'default' enter sequence for region do not cross a virtual wall */
	private void enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_default() {
		react_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall__entry_Default();
	}
	
	/* 'default' enter sequence for region passive_wait */
	private void enterSequence_passive_wait_default() {
		react_passive_wait__entry_Default();
	}
	
	/* 'default' enter sequence for region check */
	private void enterSequence_check_default() {
		react_check__entry_Default();
	}
	
	/* Default exit sequence for state robot and obstacle */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle() {
		exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles();
	}
	
	/* Default exit sequence for state turning */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state moves */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves() {
		exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement();
	}
	
	/* Default exit sequence for state moveBack */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state moveFront */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state gap down */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state grip */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state gripPosition */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state savePosition */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_savePosition() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state blocage */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_blocage() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state robot and virtualWall */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall() {
		exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall();
	}
	
	/* Default exit sequence for state virtual stop */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state virtual block */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state wait */
	private void exitSequence_passive_wait_wait() {
		stateVector[2] = State.$NULLSTATE$;
		stateConfVectorPosition = 2;
		
		exitAction_passive_wait_wait();
	}
	
	/* Default exit sequence for state check */
	private void exitSequence_check_check() {
		stateVector[3] = State.$NULLSTATE$;
		stateConfVectorPosition = 3;
		
		exitAction_check_check();
	}
	
	/* Default exit sequence for region move */
	private void exitSequence_move() {
		switch (stateVector[0]) {
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_GAP_DOWN:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIP:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_DODGING_OBJECTS_GRIPPOSITION:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_BLOCAGE:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_blocage();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOTS_AND_OBJECT_SAVE_POSITION_SAVEPOSITION:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_savePosition();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region dodging obstacles */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles() {
		switch (stateVector[0]) {
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_TURNING:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region simple robot movement */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement() {
		switch (stateVector[0]) {
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEBACK:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_OBSTACLE_DODGING_OBSTACLES_MOVES_SIMPLE_ROBOT_MOVEMENT_MOVEFRONT:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region do not cross a virtual wall */
	private void exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall() {
		switch (stateVector[0]) {
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_STOP:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop();
			break;
		case MOVE_ROBOT_IS_RUNNING_ROBOT_IS_IN_CLEANING_MODE_ROBOT_AND_VIRTUALWALL_DO_NOT_CROSS_A_VIRTUAL_WALL_VIRTUAL_BLOCK:
			exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region passive_wait */
	private void exitSequence_passive_wait() {
		switch (stateVector[2]) {
		case PASSIVE_WAIT_WAIT:
			exitSequence_passive_wait_wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region check */
	private void exitSequence_check() {
		switch (stateVector[3]) {
		case CHECK_CHECK:
			exitSequence_check_check();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_move__entry_Default() {
		enterSequence_move_robot_is_running_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_move_robot_is_running_robot_is_in_cleaning_mode__entry_Default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement__entry_Default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles__entry_Default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position__entry_Default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_savePosition_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall__entry_Default() {
		enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_passive_wait__entry_Default() {
		enterSequence_passive_wait_wait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_check__entry_Default() {
		enterSequence_check_check_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long move_robot_is_running_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (robotIsBlocked) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_blocage_default();
				move_robot_is_running_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAnObstacle) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack_default();
				move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(0);
				
				transitioned_after = 0;
			} else {
				if (thereIsNoObstacle) {
					exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning();
					enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_default();
					move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAGapDown) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle();
				raiseMoveBack();
				
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down_default();
				move_robot_is_running_react(0);
				
				transitioned_after = 0;
			} else {
				if (thereIsAnObstacle) {
					exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves();
					enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning_default();
					move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(0);
					
					transitioned_after = 0;
				} else {
					if (thereIsAVirtualWall) {
						exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle();
						enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_default();
						move_robot_is_running_react(0);
						
						transitioned_after = 0;
					} else {
						if (thereIsAnObject) {
							exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle();
							enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition_default();
							enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_default();
							move_robot_is_running_react(0);
							
							transitioned_after = 0;
						}
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsNoObstacleFront) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning_default();
				move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAFrontObstacle) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveFront();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_simple_robot_movement_moveBack_default();
				move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_gap_down_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAGapDown) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down_default();
				move_robot_is_running_react(0);
				
				transitioned_after = 0;
			} else {
				if (thereIsnoGap) {
					exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_gap_down();
					enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_turning_default();
					move_robot_is_running_react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (readyToGrip) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_gripPosition();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_dodging_objects_grip_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_save_position_savePosition_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (theObjectIsGrip) {
				raiseSaveRobotPosition();
			}
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robots_and_object_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_blocage_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsNoObstacle) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_blocage();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_default();
				move_robot_is_running_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsNoVirtualWall) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_obstacle_dodging_obstacles_moves_default();
				move_robot_is_running_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAVirtualWall) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block_default();
				move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (thereIsAVirtualWall) {
				exitSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_block();
				enterSequence_move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_do_not_cross_a_virtual_wall_virtual_stop_default();
				move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = move_robot_is_running_robot_is_in_cleaning_mode_robot_and_virtualWall_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long passive_wait_wait_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<2) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[0]) {
				raiseDoPW();
			}
		}
		return transitioned_after;
	}
	
	private long check_check_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<3) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			if (timeEvents[1]) {
				raiseCheck();
			}
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
